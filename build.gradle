plugins {
    id "com.jfrog.artifactory" version "4.1.1"
}

apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'signing'

apply from: rootProject.file('artifactory.gradle')

group = 'me.sgeb.gradle'
version = '2.6.0'
status = 'Development'

sourceCompatibility = 1.6
targetCompatibility = 1.6

repositories {
    maven {
        name "SimpliVity Artifactory Repository"
        url artifactoryUrl
    }
}

dependencies {
    compile gradleApi()
    compile localGroovy()

    testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'
}

jar {
    manifest {
        attributes 'Implementation-Title': 'Gradle Native Artifacts Plugin',
                'Implementation-Version': version,
                'Built-By': System.getProperty('user.name'),
                'Built-Date': new Date(),
                'Built-JDK': System.getProperty('java.version'),
                'Built-Gradle': gradle.gradleVersion
    }
}

ext.pomConfiguration = {
    project {
        name 'Gradle Native Artifacts Plugin'
        description 'A gradle plugin to package C/C++ native executables and ' +
                'libraries into artifacts publishable to Ivy or Maven, with ' +
                'support for transitive dependencies.'
        url 'https://github.com/sgeb/gradle-native-artifacts-plugin'
        inceptionYear '2014'

        scm {
            url 'https://github.com/sgeb/gradle-native-artifacts-plugin'
            connection 'scm:git:https://github.com/sgeb/gradle-native-artifacts-plugin.git'
            developerConnection 'scm:git:https://github.com/sgeb/gradle-native-artifacts-plugin.git'
        }

        licenses {
            license {
                name 'The MIT License'
                url 'http://www.opensource.org/licenses/mit-license.php'
                distribution 'repo'
            }
        }

        developers {
            developer {
                id 'sgeb'
                name 'Serge Gebhardt'
            }
        }
    }
}

task groovydocJar(type: Jar, dependsOn: groovydoc) {
    classifier = 'javadoc'
    from groovydoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives groovydocJar
    archives sourcesJar
}

signing {
    required { gradle.taskGraph.hasTask("uploadArchives") ||
            gradle.taskGraph.hasTask("install") }
    sign configurations.archives
}

// GRADLE-1285 - workaround to get <packaging>jar</packaging>
//               into the pom file
def pomPackagingElement = { root ->
    def children = root.asNode().children()
    def versionIndex = children.indexOf(children.find {it.name().localPart == 'version'})
    children.add(versionIndex + 1, new Node(null, 'packaging', 'jar'))
}

install {
    repositories {
        mavenInstaller {
            beforeDeployment { mavenDeployment ->
                signing.signPom(mavenDeployment)
            }

            pom(pomConfiguration)

            pom.withXml pomPackagingElement
        }
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { mavenDeployment ->
                signing.signPom(mavenDeployment)
            }

            repository(url: "file://$rootDir/../maven_repo")
            pom(pomConfiguration)
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.10'
}

tasks['uploadArchives'].mustRunAfter tasks.withType(Test)

gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.hasTask(':uploadArchives'))
    {
        if (!taskGraph.hasTask(':test'))
        {
            throw new StopExecutionException('Test task must be run for releases that ' +
                    'will be uploaded.')
        }
    }
}
